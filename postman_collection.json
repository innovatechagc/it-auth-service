{
	"info": {
		"_postman_id": "it-auth-service-collection",
		"name": "🔐 IT Auth Service API",
		"description": "Colección completa para probar el servicio de autenticación IT Auth Service\n\n🚀 **Endpoints disponibles:**\n- Health checks\n- Autenticación\n- Gestión de usuarios\n- Validación de tokens\n\n📝 **Variables de entorno:**\n- `base_url`: http://localhost:8082\n- `jwt_token`: Token JWT para autenticación\n\n🔧 **Configuración local:**\nAsegúrate de tener el servicio corriendo en puerto 8082",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "🏥 Health Checks",
			"item": [
				{
					"name": "💚 Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('✅ Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('✅ Response has status ok', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('ok');",
									"});",
									"",
									"pm.test('✅ Response has service name', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.service).to.eql('it-auth-service');",
									"});",
									"",
									"console.log('🎉 Health check passed!');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"health"
							]
						},
						"description": "🔍 Verifica que el servicio esté funcionando correctamente"
					},
					"response": []
				},
				{
					"name": "🟢 Readiness Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('✅ Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('✅ Service is ready', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.ready).to.be.true;",
									"});",
									"",
									"console.log('🚀 Service is ready!');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/ready",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"ready"
							]
						},
						"description": "🔍 Verifica que el servicio esté listo para recibir tráfico"
					},
					"response": []
				}
			],
			"description": "🏥 Endpoints para verificar el estado del servicio"
		},
		{
			"name": "🔐 Firebase Authentication",
			"item": [
				{
					"name": "🔥 Firebase Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('✅ Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('✅ Response has success true', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test('✅ Response has token and user', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('token');",
									"    pm.expect(jsonData.data).to.have.property('user');",
									"    pm.expect(jsonData.data).to.have.property('isNewUser');",
									"    ",
									"    // Guardar token y user_id para usar en otras requests",
									"    if (jsonData.data.token) {",
									"        pm.environment.set('jwt_token', jsonData.data.token);",
									"        pm.environment.set('user_id', jsonData.data.user.id.toString());",
									"        console.log('🔑 JWT Token and User ID saved to environment');",
									"    }",
									"});",
									"",
									"console.log('🔥 Firebase login successful!');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firebase_token\": \"{{firebase_token}}\",\n    \"provider\": \"google.com\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/firebase-login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"firebase-login"
							]
						},
						"description": "🔥 Autenticación con token de Firebase (Google, Facebook, Email/Password)"
					},
					"response": []
				},
				{
					"name": "📝 Firebase Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('✅ Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('✅ Response has success true', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test('✅ User registered successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('token');",
									"    pm.expect(jsonData.data).to.have.property('user');",
									"    pm.expect(jsonData.data.isNewUser).to.be.true;",
									"});",
									"",
									"console.log('📝 Firebase registration successful!');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firebase_token\": \"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.example_firebase_token\",\n    \"provider\": \"password\",\n    \"registration_data\": {\n        \"username\": \"johndoe123\",\n        \"first_name\": \"John\",\n        \"last_name\": \"Doe\"\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/firebase-register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"firebase-register"
							]
						},
						"description": "📝 Registro de nuevo usuario con token de Firebase"
					},
					"response": []
				},
				{
					"name": "🔄 Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('✅ Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('✅ Token refreshed successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('token');",
									"    pm.expect(jsonData.data).to.have.property('user');",
									"    ",
									"    // Actualizar token en environment",
									"    if (jsonData.data.token) {",
									"        pm.environment.set('jwt_token', jsonData.data.token);",
									"        console.log('🔄 JWT Token refreshed and updated');",
									"    }",
									"});",
									"",
									"console.log('🔄 Token refresh successful!');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firebase_token\": \"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.refreshed_firebase_token\",\n    \"provider\": \"refresh\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/refresh-token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"refresh-token"
							]
						},
						"description": "🔄 Renovación de token JWT interno"
					},
					"response": []
				},
				{
					"name": "🚪 Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('✅ Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('✅ Logout successful', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('message');",
									"});",
									"",
									"// Limpiar token del environment",
									"pm.environment.unset('jwt_token');",
									"pm.environment.unset('user_id');",
									"console.log('👋 Logout successful, tokens cleared!');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"{{jwt_token}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"logout"
							]
						},
						"description": "🚪 Cerrar sesión del usuario"
					},
					"response": []
				},
				{
					"name": "🚪 Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('✅ Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('✅ Response has token', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('token');",
									"    ",
									"    // Guardar token para usar en otras requests",
									"    if (jsonData.token) {",
									"        pm.environment.set('jwt_token', jsonData.token);",
									"        console.log('🔑 JWT Token saved to environment');",
									"    }",
									"});",
									"",
									"console.log('🎉 Login successful!');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"admin@innovatech.com\",\n    \"password\": \"admin123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						},
						"description": "🔐 Autenticación de usuario con email y contraseña"
					},
					"response": []
				},
				{
					"name": "📝 Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('✅ Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('✅ User created successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData).to.have.property('user');",
									"});",
									"",
									"console.log('👤 User registered successfully!');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test User\",\n    \"email\": \"test@innovatech.com\",\n    \"password\": \"test123\",\n    \"role\": \"user\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						},
						"description": "📝 Registro de nuevo usuario"
					},
					"response": []
				},
				{
					"name": "🔍 Validate Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('✅ Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('✅ Token is valid', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.valid).to.be.true;",
									"    pm.expect(jsonData).to.have.property('user');",
									"});",
									"",
									"console.log('🔑 Token validation successful!');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/validate",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"validate"
							]
						},
						"description": "🔍 Validación de token JWT"
					},
					"response": []
				},
				{
					"name": "🚪 Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('✅ Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('✅ Logout successful', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									"// Limpiar token del environment",
									"pm.environment.unset('jwt_token');",
									"console.log('👋 Logout successful, token cleared!');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"logout"
							]
						},
						"description": "🚪 Cerrar sesión del usuario"
					},
					"response": []
				}
			],
			"description": "🔐 Endpoints de autenticación y autorización"
		},
		{
			"name": "👥 User Management",
			"item": [
				{
					"name": "👤 Get User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('✅ Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('✅ Response has user data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData.user).to.have.property('email');",
									"});",
									"",
									"console.log('👤 User profile retrieved!');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/users/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"profile"
							]
						},
						"description": "👤 Obtener perfil del usuario autenticado"
					},
					"response": []
				},
				{
					"name": "✏️ Update User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('✅ Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('✅ Profile updated successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData).to.have.property('user');",
									"});",
									"",
									"console.log('✏️ Profile updated successfully!');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated Name\",\n    \"phone\": \"+1234567890\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/users/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"profile"
							]
						},
						"description": "✏️ Actualizar perfil del usuario"
					},
					"response": []
				},
				{
					"name": "📋 List Users (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('✅ Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('✅ Response has users list', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('users');",
									"    pm.expect(jsonData.users).to.be.an('array');",
									"});",
									"",
									"console.log('📋 Users list retrieved!');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/users?page=1&limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						},
						"description": "📋 Listar usuarios (solo administradores)"
					},
					"response": []
				}
			],
			"description": "👥 Endpoints para gestión de usuarios"
		},
		{
			"name": "🔧 Utilities",
			"item": [
				{
					"name": "📊 Swagger Documentation",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/swagger/index.html",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"swagger",
								"index.html"
							]
						},
						"description": "📊 Documentación Swagger de la API"
					},
					"response": []
				},
				{
					"name": "🔍 API Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('✅ Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('✅ Response has API info', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('version');",
									"});",
									"",
									"console.log('🔍 API info retrieved!');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/info",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"info"
							]
						},
						"description": "🔍 Información general de la API"
					},
					"response": []
				}
			],
			"description": "🔧 Utilidades y herramientas de desarrollo"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// 🚀 Pre-request script global",
					"console.log('🔄 Executing request to: ' + pm.request.url);",
					"",
					"// Verificar si tenemos base_url configurada",
					"if (!pm.environment.get('base_url')) {",
					"    pm.environment.set('base_url', 'http://localhost:8082');",
					"    console.log('🔧 Base URL set to default: http://localhost:8082');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// 📊 Post-response script global",
					"console.log('📈 Response status: ' + pm.response.status);",
					"console.log('⏱️ Response time: ' + pm.response.responseTime + 'ms');",
					"",
					"// Log de errores si el status no es exitoso",
					"if (pm.response.code >= 400) {",
					"    console.log('❌ Error response body:', pm.response.text());",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8082",
			"type": "string"
		},
		{
			"key": "jwt_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "firebase_token",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.example_firebase_token_here",
			"type": "string"
		}
	]
}